basePath: /api/
definitions:
  dto.TaskRequestDto:
    properties:
      active_at:
        type: string
      title:
        type: string
    type: object
  dto.TaskResponseDto:
    properties:
      active_at:
        type: string
      id:
        type: string
      is_done:
        type: boolean
      title:
        type: string
    type: object
host: localhost:8181
info:
  contact: {}
  description: Server allows manage your daily tasks
  title: Todo Server
  version: "2.0"
paths:
  /todo-list/tasks:
    get:
      consumes:
      - application/json
      description: Get tasks filtered by their status
      parameters:
      - description: Task status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.TaskResponseDto'
            type: array
      summary: Get tasks by status
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the input payload
      parameters:
      - description: Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.TaskRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TaskResponseDto'
        "400":
          description: Bad Request
          schema: {}
      summary: Create a new task
      tags:
      - tasks
  /todo-list/tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      summary: Delete an existing task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update the task with the input payload
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.TaskRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      summary: Update an existing task
      tags:
      - tasks
  /todo-list/tasks/{id}/complete:
    put:
      consumes:
      - application/json
      description: Complete the task by its ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      summary: Complete an existing task
      tags:
      - tasks
swagger: "2.0"
